// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// MCG_Clayton_cpp
Rcpp::DataFrame MCG_Clayton_cpp(Rcpp::NumericVector time, Rcpp::NumericVector status, double theta);
RcppExport SEXP _RMSTdepC_MCG_Clayton_cpp(SEXP timeSEXP, SEXP statusSEXP, SEXP thetaSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< Rcpp::NumericVector >::type time(timeSEXP);
  Rcpp::traits::input_parameter< Rcpp::NumericVector >::type status(statusSEXP);
  Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
  rcpp_result_gen = Rcpp::wrap(MCG_Clayton_cpp(time, status, theta));
  return rcpp_result_gen;
  END_RCPP
}
// MCG_Gumbel_cpp
Rcpp::DataFrame MCG_Gumbel_cpp(Rcpp::NumericVector time, Rcpp::NumericVector status, double theta);
RcppExport SEXP _RMSTdepC_MCG_Gumbel_cpp(SEXP timeSEXP, SEXP statusSEXP, SEXP thetaSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< Rcpp::NumericVector >::type time(timeSEXP);
  Rcpp::traits::input_parameter< Rcpp::NumericVector >::type status(statusSEXP);
  Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
  rcpp_result_gen = Rcpp::wrap(MCG_Gumbel_cpp(time, status, theta));
  return rcpp_result_gen;
  END_RCPP
}
// MCG_Frank_cpp
Rcpp::DataFrame MCG_Frank_cpp(Rcpp::NumericVector time, Rcpp::NumericVector status, double theta);
RcppExport SEXP _RMSTdepC_MCG_Frank_cpp(SEXP timeSEXP, SEXP statusSEXP, SEXP thetaSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< Rcpp::NumericVector >::type time(timeSEXP);
  Rcpp::traits::input_parameter< Rcpp::NumericVector >::type status(statusSEXP);
  Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
  rcpp_result_gen = Rcpp::wrap(MCG_Frank_cpp(time, status, theta));
  return rcpp_result_gen;
  END_RCPP
}

// MCG_cpp
Rcpp::DataFrame MCG_cpp(Rcpp::NumericVector time, Rcpp::NumericVector status, int family, double theta);
RcppExport SEXP _RMSTdepC_MCG_cpp(SEXP timeSEXP, SEXP statusSEXP, SEXP familySEXP, SEXP thetaSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< Rcpp::NumericVector >::type time(timeSEXP);
  Rcpp::traits::input_parameter< Rcpp::NumericVector >::type status(statusSEXP);
  Rcpp::traits::input_parameter< int >::type family(familySEXP);
  Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
  rcpp_result_gen = Rcpp::wrap(MCG_cpp(time, status, family, theta));
  return rcpp_result_gen;
  END_RCPP
}
// sort_by
Rcpp::NumericVector sort_by(Rcpp::NumericVector x, Rcpp::NumericVector y);
RcppExport SEXP _RMSTdepC_sort_by(SEXP xSEXP, SEXP ySEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
  Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
  rcpp_result_gen = Rcpp::wrap(sort_by(x, y));
  return rcpp_result_gen;
  END_RCPP
}
// SC_update_cpp
NumericVector SC_update_cpp(NumericVector time, NumericVector status, NumericVector Sx, NumericVector Sy, int family, double theta, double tol);
RcppExport SEXP _RMSTdepC_SC_update_cpp(SEXP timeSEXP, SEXP statusSEXP, SEXP SxSEXP, SEXP SySEXP, SEXP familySEXP, SEXP thetaSEXP, SEXP tolSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< Rcpp::NumericVector >::type time(timeSEXP);
  Rcpp::traits::input_parameter< Rcpp::NumericVector >::type status(statusSEXP);
  Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Sx(SxSEXP);
  Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Sy(SySEXP);
  Rcpp::traits::input_parameter< int >::type family(familySEXP);
  Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
  Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
  
  rcpp_result_gen = Rcpp::wrap(SC_update_cpp(time, status, Sx, Sy, family, theta, tol));
  return rcpp_result_gen;
  END_RCPP
}
// SC_copula_cpp
DataFrame SC_copula_cpp(NumericVector time, NumericVector status, int family, double theta, double tol);
RcppExport SEXP _RMSTdepC_SC_copula_cpp(SEXP timeSEXP, SEXP statusSEXP, SEXP familySEXP, SEXP thetaSEXP, SEXP tolSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< Rcpp::NumericVector >::type time(timeSEXP);
  Rcpp::traits::input_parameter< Rcpp::NumericVector >::type status(statusSEXP);
  Rcpp::traits::input_parameter< int >::type family(familySEXP);
  Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
  Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
  
  rcpp_result_gen = Rcpp::wrap(SC_copula_cpp(time, status, family, theta, tol));
  return rcpp_result_gen;
  END_RCPP
}
// RMST_cpp
double RMST_cpp(DataFrame data, String method, double tau, int family, double theta, double tol);
RcppExport SEXP _RMSTdepC_RMST_cpp(SEXP dataSEXP, SEXP methodSEXP, SEXP tauSEXP, SEXP familySEXP, SEXP thetaSEXP, SEXP tolSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< Rcpp::DataFrame >::type data(dataSEXP);
  Rcpp::traits::input_parameter< String >::type method(methodSEXP);
  Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
  Rcpp::traits::input_parameter< int >::type family(familySEXP);  
  Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
  Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
  
  rcpp_result_gen = Rcpp::wrap(RMST_cpp(data, method, tau, family, theta, tol));
  return rcpp_result_gen;
  END_RCPP
}
// RMST_ENS_cpp
double RMST_ENS_cpp(DataFrame data, String method, double tau, NumericVector theta_vec, NumericVector weight, double tol);
RcppExport SEXP _RMSTdepC_RMST_ENS_cpp(SEXP dataSEXP, SEXP methodSEXP, SEXP tauSEXP, SEXP theta_vecSEXP, SEXP weightSEXP, SEXP tolSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< Rcpp::DataFrame >::type data(dataSEXP);
  Rcpp::traits::input_parameter< String >::type method(methodSEXP);
  Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
  Rcpp::traits::input_parameter< NumericVector >::type theta_vec(theta_vecSEXP);
  Rcpp::traits::input_parameter< NumericVector >::type weight(weightSEXP);
  Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
  
  rcpp_result_gen = Rcpp::wrap(RMST_ENS_cpp(data, method, tau, theta_vec, weight, tol));
  return rcpp_result_gen;
  END_RCPP
}
// RMST_var_cpp
double RMST_var_cpp(DataFrame data, String method, double tau, double theta, int family, int n_boots, bool ensemble, NumericVector weight, NumericVector weight, double tol);
RcppExport SEXP _RMSTdepC_RMST_var_cpp(SEXP dataSEXP, SEXP methodSEXP, SEXP tauSEXP, SEXP thetaSEXP, SEXP familySEXP, SEXP n_bootsSEXP, SEXP ensembleSEXP, SEXP theta_vecSEXP, SEXP weightSEXP, SEXP tolSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< Rcpp::DataFrame >::type data(dataSEXP);
  Rcpp::traits::input_parameter< String >::type method(methodSEXP);
  Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
  Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
  Rcpp::traits::input_parameter< int >::type family(familySEXP);
  Rcpp::traits::input_parameter< int >::type n_boots(n_bootsSEXP);
  Rcpp::traits::input_parameter< bool >::type ensemble(ensembleSEXP);
  Rcpp::traits::input_parameter< NumericVector >::type theta_vec(theta_vecSEXP);
  Rcpp::traits::input_parameter< NumericVector >::type weight(weightSEXP);
  Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
  
  rcpp_result_gen = Rcpp::wrap(RMST_var_cpp(data, method, tau, theta, family, n_boots, ensemble, theta_vec, weight, tol));
  return rcpp_result_gen;
  END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
  {"_RMSTdepC_MCG_Clayton_cpp", (DL_FUNC) &_RMSTdepC_MCG_Clayton_cpp, 3},
  {"_RMSTdepC_MCG_Gumbel_cpp", (DL_FUNC) &_RMSTdepC_MCG_Gumbel_cpp, 3},
  {"_RMSTdepC_MCG_Frank_cpp", (DL_FUNC) &_RMSTdepC_MCG_Frank_cpp, 3},
  {"_RMSTdepC_MCG_cpp", (DL_FUNC) &_RMSTdepC_MCG_cpp, 4},
  {"_RMSTdepC_sort_by", (DL_FUNC) &_RMSTdepC_sort_by, 2},
  {"_RMSTdepC_SC_update_cpp", (DL_FUNC) &_RMSTdepC_SC_update_cpp, 7},
  {"_RMSTdepC_SC_copula_cpp", (DL_FUNC) &_RMSTdepC_SC_copula_cpp, 5},
  {"_RMSTdepC_RMST_cpp", (DL_FUNC) &_RMSTdepC_RMST_cpp, 6},
  {"_RMSTdepC_RMST_ENS_cpp", (DL_FUNC) &_RMSTdepC_RMST_ENS_cpp, 6},
{"_RMSTdepC_RMST_var_cpp", (DL_FUNC) &_RMSTdepC_RMST_var_cpp, 10},
  {NULL, NULL, 0}
};

RcppExport void R_init_RMSTdepC(DllInfo *dll) {
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
}
